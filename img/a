vector<int> v; // 声明

v.push_back(x); // 尾部添加一个元素
v.pop_back(); // 删除尾部元素
v.insert(v.begin()+2,2); // 在第二个元素后插入新元素
v.back(); // 取出尾部的元素
v.size(); // 返回vector的大小
v.clear(); // 清空vector


stack<int> s;
s.push(x); // 压入栈中元素
int n = s.top(); // 返回栈顶元素
int  = s.size(); // 返回栈的大小
s.pop(); // 弹出栈顶元素
s.empty(); // 判断栈是否为空

int x=1;
queue<int> q; // 声明

q.push(x); // 推入队列中元素
q.empty(); // 判断是否为空
q.front(); // 取出对列首部的元素
q.back(); // 取出队尾元素
q.size(); // 返回队列长度
q.pop(); // 弹出队首元素


string s = "aabbcc";
s.push_back('a'); // 像尾部追加一个字符
char c = s.back(); // 获取尾部的字符
char c2= s.front(); // 获取头部的字符
s.pop_back(); // 弹出尾部的字符

// 字符串翻转
reverse(s.begin(),s.end()); // 不需要重新赋值
// 排序
sort(s.begin(),s.end());
// 插入元素
s.insert(2,"ahh"); // 在第二个元素后插入
// 删除元素
s.erase(2, 3); // 从第二个元素开始删除后面的3个元素

string d = s.substr(1,3); // 从索引为1的元素开始获取3个元素
int a = s.find("aa"); // 找到返回索引，找不到返回-1



#include <iostream>
#include <algorithm>
#include <string>
#include <vector>

using namespace std;

typedef struct {
    int begin;
    int end;
    int weight;
} Edge;

int calculateWeight(int a, int b) {
    int res = 0;
    string sa = to_string(a), sb = to_string(b);
    while (sa.size() < sb.size()) sa = "0" + sa;        // 因为 枚举时 a <b 所以 只可能是a要补前导0
    for (int i = 0; i < sa.size(); ++i) {
        if (sa[i] != sb[i])
            res += sa[i] - '0' + sb[i] - '0';
    }
    return res;
}


bool myCompare(Edge a, Edge b) {
    return a.weight < b.weight; // 升序排列
}

int Find(const int *parent, int f) {
    while (parent[f] > 0)
        f = parent[f];
    return f;
}

int main() {
    vector<Edge> M;
    // 构建边集数组
    for (int i = 0; i < 2021; ++i) {
        for (int j = i + 1; j < 2021; ++j) {
            Edge edge;
            edge.begin = i;
            edge.end = j;
            edge.weight = calculateWeight(i + 1, j + 1);
            M.push_back(edge);
        }
    }
    sort(M.begin(), M.end(), myCompare);
    int maxVex = M.size();
    int parent[maxVex];
    for (int i = 0; i < maxVex; ++i) {
        parent[i] = 0; // 初始化数组值为0
    }

    long long res = 0;
    for (int i = 0; i < maxVex; ++i) { // 循环每一条边
        int n = Find(parent, M[i].begin);
        int m = Find(parent, M[i].end);
        if (n != m) {
            parent[n] = m;
            res += M[i].weight;
        }
    }
    cout << res << endl;
    return 0;

}